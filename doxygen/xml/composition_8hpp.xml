<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.5">
  <compounddef id="composition_8hpp" kind="file">
    <compoundname>composition.hpp</compoundname>
    <includes local="no">fstream</includes>
    <includes local="no">array</includes>
    <incdepgraph>
      <node id="114">
        <label>fstream</label>
      </node>
      <node id="113">
        <label>composition.hpp</label>
        <link refid="composition.hpp"/>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
      </node>
      <node id="115">
        <label>array</label>
      </node>
    </incdepgraph>
    <innerclass refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample" prot="public">Fsl::Monitoring::Composition::Sample</innerclass>
    <innerclass refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples" prot="public">Fsl::Monitoring::Composition::Samples</innerclass>
    <innernamespace refid="namespaceFsl">Fsl</innernamespace>
    <innernamespace refid="namespaceFsl_1_1Monitoring">Fsl::Monitoring</innernamespace>
    <innernamespace refid="namespaceFsl_1_1Monitoring_1_1Composition">Fsl::Monitoring::Composition</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Fsl<sp/>{</highlight></codeline>
<codeline lineno="7" refid="namespaceFsl_1_1Monitoring" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Monitoring<sp/>{</highlight></codeline>
<codeline lineno="8" refid="namespaceFsl_1_1Monitoring_1_1Composition" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Composition<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Bins</highlight></codeline>
<codeline lineno="12"><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="13" refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample" kindref="compound">Sample</ref><sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="16" refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a05a8d7cc327b35a90ecf6e159ebbe965" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a05a8d7cc327b35a90ecf6e159ebbe965" kindref="member">bins</ref><sp/>=<sp/>Bins;</highlight></codeline>
<codeline lineno="17" refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a18575c5da5e9f61aa1f0c6fbc0521eb9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a18575c5da5e9f61aa1f0c6fbc0521eb9" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="18" refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a153919085e80b3cbecd805de97522460" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;double,Bins&gt;<sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a153919085e80b3cbecd805de97522460" kindref="member">observeds</ref>;</highlight></codeline>
<codeline lineno="19" refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1aa195354712a01e71eb4df912e003f101" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;double,Bins&gt;<sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1aa195354712a01e71eb4df912e003f101" kindref="member">expecteds</ref>;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a7f94384610772cc0974e09503065884c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a7f94384610772cc0974e09503065884c" kindref="member">Sample</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">):</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a18575c5da5e9f61aa1f0c6fbc0521eb9" kindref="member">size</ref>(0){</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="25" refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a23604f5f74942ac32ef860cf132573ce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a23604f5f74942ac32ef860cf132573ce" kindref="member">Sample</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a18575c5da5e9f61aa1f0c6fbc0521eb9" kindref="member">size</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>observed):</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size(size){</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(observed.size()==<ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a05a8d7cc327b35a90ecf6e159ebbe965" kindref="member">bins</ref>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin=0;bin&lt;<ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a05a8d7cc327b35a90ecf6e159ebbe965" kindref="member">bins</ref>;bin++)<sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a153919085e80b3cbecd805de97522460" kindref="member">observeds</ref>[bin]<sp/>=<sp/>observed[bin];</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="31" refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a3040018d4815acc17eb494a58daeafdf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a3040018d4815acc17eb494a58daeafdf" kindref="member">expected</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a3040018d4815acc17eb494a58daeafdf" kindref="member">expected</ref>){</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(expected.size()==<ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a05a8d7cc327b35a90ecf6e159ebbe965" kindref="member">bins</ref>);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin=0;bin&lt;<ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a05a8d7cc327b35a90ecf6e159ebbe965" kindref="member">bins</ref>;bin++)<sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1aa195354712a01e71eb4df912e003f101" kindref="member">expecteds</ref>[bin]<sp/>=<sp/>expected[bin];</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="36" refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a25166947f938f065b2df7af5b322f3ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a25166947f938f065b2df7af5b322f3ef" kindref="member">likelihood</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>n_<sp/>=<sp/>std::min(<ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a18575c5da5e9f61aa1f0c6fbc0521eb9" kindref="member">size</ref>,1000.0);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin=0;bin&lt;<ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a05a8d7cc327b35a90ecf6e159ebbe965" kindref="member">bins</ref>;bin++)<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>o<sp/>=<sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a153919085e80b3cbecd805de97522460" kindref="member">observeds</ref>[bin];</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal">&amp;<sp/>e<sp/>=<sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1aa195354712a01e71eb4df912e003f101" kindref="member">expecteds</ref>[bin];</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e_<sp/>=<sp/>(1-e)*e+0.1/bins;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>+=<sp/>std::log(e_);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>-std::pow(o-e,2)/(2*e_/n_);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>+=<sp/>std::log(std::exp(c)+0.01);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-(0.5*a-b);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal">};</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Bins,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Key<sp/>=<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="58" refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples" kindref="compound">Samples</ref><sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="60" refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1a6927918bc03e5be9910dcf2dc11590a6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample" kindref="compound">Sample&lt;Bins&gt;</ref><sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1a6927918bc03e5be9910dcf2dc11590a6" kindref="member">SampleType</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="62" refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1a41cd5cc53c49048c495849be30fcba1b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;Key,SampleType&gt;<sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1a41cd5cc53c49048c495849be30fcba1b" kindref="member">samples</ref>;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="64" refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1ab221d6b5c1c8b8c12bee85287025a23c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1ab221d6b5c1c8b8c12bee85287025a23c" kindref="member">observed</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key&amp;<sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>proportions){</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample" kindref="compound">SampleType</ref><sp/>sample(size,proportions);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1a41cd5cc53c49048c495849be30fcba1b" kindref="member">samples</ref>[key]<sp/>=<sp/>sample;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69" refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1aab726ce557d12fbe2df39b0ace7bec3a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1aab726ce557d12fbe2df39b0ace7bec3a" kindref="member">observeds</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::pair&lt;Key,SampleType&gt;&gt;&amp;<sp/>values){</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>sample<sp/>:<sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1a41cd5cc53c49048c495849be30fcba1b" kindref="member">samples</ref>)<sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1ab221d6b5c1c8b8c12bee85287025a23c" kindref="member">observed</ref>(sample.first,sample.second);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="73" refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1a483675e7a9053c533c16d3765f9aedce" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1a483675e7a9053c533c16d3765f9aedce" kindref="member">expected</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Key&amp;<sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;double&gt;&amp;<sp/>proportions){</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1a41cd5cc53c49048c495849be30fcba1b" kindref="member">samples</ref>[key].expected(proportions);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1aa10e5bfceb5a86d72960299a2e5ace6e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1aa10e5bfceb5a86d72960299a2e5ace6e" kindref="member">likelihood</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1aa10e5bfceb5a86d72960299a2e5ace6e" kindref="member">likelihood</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>sample<sp/>:<sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1a41cd5cc53c49048c495849be30fcba1b" kindref="member">samples</ref>)<sp/>likelihood<sp/>+=<sp/>sample.second.likelihood();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1aa10e5bfceb5a86d72960299a2e5ace6e" kindref="member">likelihood</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1a8ba2ebc44515c75b695387571c8a5260" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1a8ba2ebc44515c75b695387571c8a5260" kindref="member">observeds_output</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filename){</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::ofstream<sp/>file(filename);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file&lt;&lt;</highlight><highlight class="stringliteral">&quot;key\tbin\tobs\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>sample<sp/>:<sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1a41cd5cc53c49048c495849be30fcba1b" kindref="member">samples</ref>)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin=0;bin&lt;sample.second.observeds.size();bin++){</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>file&lt;&lt;sample.first&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">&lt;&lt;bin&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">&lt;&lt;sample.second.observeds[bin]&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93" refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1a2d5c00ff1b0493b5ed90ddaef1d9ce9b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1a2d5c00ff1b0493b5ed90ddaef1d9ce9b" kindref="member">stream</ref>(std::ostream&amp;<sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1a2d5c00ff1b0493b5ed90ddaef1d9ce9b" kindref="member">stream</ref>,</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>prefix=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>sample<sp/>:<sp/><ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Samples_1a41cd5cc53c49048c495849be30fcba1b" kindref="member">samples</ref>)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bin=0;bin&lt;<ref refid="classFsl_1_1Monitoring_1_1Composition_1_1Sample_1a05a8d7cc327b35a90ecf6e159ebbe965" kindref="member">SampleType::bins</ref>;bin++){</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(prefix.length()&gt;0)<sp/>stream&lt;&lt;prefix&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stream</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;sample.first&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;bin&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;sample.second.observeds[bin]&lt;&lt;</highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;sample.second.expecteds[bin]&lt;&lt;</highlight><highlight class="stringliteral">&quot;\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal">};</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/home/nbentley/Trophia/P12013_Trident/Code/fsl/fsl/monitoring/composition/composition.hpp"/>
  </compounddef>
</doxygen>
